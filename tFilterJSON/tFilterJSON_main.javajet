<%@ jet
imports="
      org.talend.core.model.process.IConnection
      org.talend.core.model.process.INode
      org.talend.core.model.metadata.IMetadataTable
      org.talend.core.model.process.ElementParameterParser
      org.talend.core.model.metadata.IMetadataColumn
      org.talend.designer.codegen.config.CodeGeneratorArgument
      org.talend.core.model.process.IConnectionCategory
      java.util.List
      java.util.Map
      java.util.HashMap
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String inputJsonColumn = ElementParameterParser.getValue(node, "__INPUT_JSON_COLUMN__");
String incomingConnName = null;
List<? extends IConnection> inConns = node.getIncomingConnections();
if(inConns != null && inConns.size() > 0) {
    for(IConnection inConn : inConns) {
        if(inConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
            incomingConnName = inConn.getName();
            break;
        }
    }
}


List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
if(outgoingConns != null && outgoingConns.size() > 0) {
    for(IConnection outgoingConn : outgoingConns) {
        if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) { %>
            <%=outgoingConn.getName()%> = null;
    <%  }
    }
}

boolean filterFlow = false;
String outgoingConnFilterName = null;
List<? extends IConnection> outgoingConnsFilter = node.getOutgoingConnections("FILTER");
if (outgoingConnsFilter != null && outgoingConnsFilter.size() > 0) {
    for (IConnection outgoingConnFilter : outgoingConnsFilter) {
        if (outgoingConnFilter.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
              outgoingConnFilterName = outgoingConnFilter.getName();
              filterFlow = true;
              break;
        }
    }
}

boolean rejectFlow = false;
String outgoingConnRejectName = null;
List<? extends IConnection> outgoingConnsReject = node.getOutgoingConnections("REJECT");
if (outgoingConnsReject != null && outgoingConnsReject.size() > 0) {
    for (IConnection outgoingConnReject : outgoingConnsReject) {
        if (outgoingConnReject.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
              outgoingConnRejectName = outgoingConnReject.getName();
              rejectFlow = true;
              break;
        }
    }
}

List<IMetadataColumn> columnList = null;
List<IMetadataTable> metadatas = node.getMetadataList();
if(metadatas != null && metadatas.size() > 0) {
    IMetadataTable metadata = metadatas.get(0);
    if(metadata != null) {
        columnList = metadata.getListColumns();
    }
}

String filterNullJsonStr = ElementParameterParser.getValue(node, "__FILTER_NULL_INPUT__");
boolean filterNullJson = (filterNullJsonStr!=null&&!("").equals(filterNullJsonStr))?("true").equals(filterNullJsonStr):false;

String datePatternInJson = "yyyy-MM-dd HH:mm:ss";
String datePatternInJsonParam = ElementParameterParser.getValue(node, "__DATE_PATTERN_IN_JSON__");
if (datePatternInJsonParam != null && datePatternInJsonParam.replace("\"", "").length() > 0) {
    datePatternInJson = datePatternInJsonParam.replace("\"", "");
}

String decimalSeparator = ".";
String decimalSeparatorParam = ElementParameterParser.getValue(node, "__DECIMAL_SEPARATOR__");
if (decimalSeparatorParam != null && decimalSeparatorParam.length() == 1) {
    decimalSeparator = decimalSeparatorParam;
}

if (incomingConnName != null && incomingConnName.length() > 0) {  %>

    com.fasterxml.jackson.databind.ObjectMapper mapper_<%=cid%> = new com.fasterxml.jackson.databind.ObjectMapper();

    try {
        if (<%=incomingConnName%>.<%=inputJsonColumn%> != null) {

            com.fasterxml.jackson.databind.JsonNode inputJson_<%=cid%> = mapper_<%=cid%>.readTree(<%=incomingConnName%>.<%=inputJsonColumn%>.toString());
            com.fasterxml.jackson.databind.JsonNode value_<%=cid%> = null;
            java.math.BigDecimal numberValue_<%=cid%> = null;
            Integer dateDiff_<%=cid%> = null;

            <%
            List<Map<String, String>> conditions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__CONDITIONS__");
            for (Map<String, String> condition : conditions) {

                  String path = condition.get("PATH").replace("\"", "");
                  if (!path.startsWith("/")) {
                      path = "/" + path;
                  }
              %>
                  value_<%=cid%> = inputJson_<%=cid%>.at("<%=path%>");

                  System.out.println("---------------");
                  System.out.println(inputJson_<%=cid%>.toString());
                  System.out.println("<%=path%> = " + value_<%=cid%>.asText());


                  if (value_<%=cid%>.isMissingNode()) {
                      throw new Exception("The attribute <%=path%> can not be found.");
                  }
                  else {
                  <%
                      Integer operation = Integer.valueOf(condition.get("OPERATION"));
                      if (operation == 2) {  %>
                          if (!(value_<%=cid%>.isNull())) {
                              throw new Exception("The value of attribute <%=path%> is not null.");
                          }
                <%    }
                      else if (operation == 3) {  %>
                          if (value_<%=cid%>.isNull()) {
                              throw new Exception("The value of attribute <%=path%> is null.");
                          }
              <%      }
                      else if (operation > 3) { %>
                          if (!value_<%=cid%>.isValueNode()) {
                              throw new Exception("The value of attribute <%=path%> cannot be evaluated.");
                          }
                          else {
                      <%
                              String value = condition.getOrDefault("VALUE", "").trim().replace("\"", "");
                              if (operation >= 9) {
                                  value = value.replace(decimalSeparator, ".");
                                  %>
                                  try {
                                      numberValue_<%=cid%> = new java.math.BigDecimal(value_<%=cid%>.asText().replace("<%=decimalSeparator%>", "."));
                                <%    switch (operation) {
                                          case 9:  %>
                                                   if(numberValue_<%=cid%>.compareTo(new java.math.BigDecimal("<%=value%>")) != 0) {
                                                      throw new Exception("The value of attribute <%=path%> is not equal to <%=value%>.");
                                                   }
                                            <%     break;
                                          case 10: %>
                                                   if (numberValue_<%=cid%>.compareTo(new java.math.BigDecimal("<%=value%>")) != 1) {
                                                      throw new Exception("The value of attribute <%=path%> is not superior to <%=value%>.");
                                                   }
                                        <%         break;
                                         case 11:  %>
                                                   if (numberValue_<%=cid%>.compareTo(new java.math.BigDecimal("<%=value%>")) != -1) {
                                                      throw new Exception("The value of attribute <%=path%> is not inferior to <%=value%>.");
                                                   }
                                        <%         break;
                                      } %>
                                  }
                                  catch (NumberFormatException e) {
                                      throw new Exception("The value for attribute <%=path%> is not a number.");
                                  }
                          <%  }
                              else if (operation >= 7) {
                                  // date
                                  if (datePatternInJson.toLowerCase().endsWith("hh:mm:ss") && !(value.toLowerCase().endsWith("hh:mm:ss"))) {
                                        value = value + " 00:00:00";
                                  }
                                  %>
                                  dateDiff_<%=cid%> = TalendDate.compareDate(TalendDate.parseDate("<%=datePatternInJson%>", value_<%=cid%>.asText().trim(), true), TalendDate.parseDate("<%=datePatternInJson%>", "<%=value%>", true), "<%=datePatternInJson%>");
                                  System.out.println("date diff =" + dateDiff_<%=cid%>.toString());
                                  <%
                                  switch (operation) {
                                        case 7: %>
                                                if (dateDiff_<%=cid%> != 1) {
                                                    throw new Exception("The value of attribute <%=path%> is not after <%=value%>");
                                                }
                                  <%            break;
                                        case 8:   %>
                                                if (dateDiff_<%=cid%> != -1) {
                                                    throw new Exception("The value of attribute <%=path%> is not before <%=value%>");
                                                }
                                  <%            break;
                                  }
                              }
                              else if (operation == 6) {
                                  // boolean equals to
                                  if (value.trim().toLowerCase().equals("true")) {  %>
                                        if (!(value_<%=cid%>.asText().trim().toLowerCase().equals("true") || value_<%=cid%>.asText().equals("1"))) {
                                            throw new Exception("The value for attribute <%=path%> is not equal to true.");
                                        }
                            <%    }
                                  else if (value.trim().toLowerCase().equals("false")) {  %>
                                        if (!(value_<%=cid%>.asText().trim().toLowerCase().equals("false") || value_<%=cid%>.asText().equals("0"))) {
                                            throw new Exception("The value for attribute <%=path%> is not equal to false.");
                                        }
                    <%            }
                              }
                              else if (operation == 5)  {
                                  // string equals  %>
                                  if (!(value_<%=cid%>.asText().equals("<%=value%>"))) {
                                      throw new Exception("The value at attribute <%=path%> does not correspond to <%=value%>.");
                                  }
                      <%      }
                              else if (operation == 4) {
                                  // empty string   %>
                                  if (value_<%=cid%>.asText().length() > 0) {
                                      throw new Exception("The value at attribute <%=path%> is not an empty string.");
                                  }
                      <%      } %>
                          }
                <%   }  %>
                }
          <% }  %>

          }
          else {
        <%    if (filterNullJson) {  %>
                  throw new Exception("Input JSON string is null.");
        <%    }  %>
          }
    <%
          if (filterFlow) { %>

              <%=outgoingConnFilterName%> = new <%=outgoingConnFilterName%>Struct();
          <%
              for(int j = 0 ; j < columnList.size() ; j++) {
                    String colLabelBis = columnList.get(j).getLabel(); %>
                    <%=outgoingConnFilterName%>.<%=colLabelBis%> = <%=incomingConnName%>.<%=colLabelBis%>;
          <%  }
         }  %>
         nb_line_ok_<%=cid%>++;

    }
    catch (Exception e) {

    <%   if (rejectFlow) { %>
            <%=outgoingConnRejectName%> = new <%=outgoingConnRejectName%>Struct();
    <%
              for(int k = 0 ; k < columnList.size() ; k++) {
                    String colLabel = columnList.get(k).getLabel(); %>
                    <%=outgoingConnRejectName%>.<%=colLabel%> = <%=incomingConnName%>.<%=colLabel%>;
          <%  }  %>
              <%=outgoingConnRejectName%>.errorMessage = e.getMessage();
    <%  }  %>
        nb_line_error_<%=cid%>++;

    }

    nb_line_<%=cid%>++ ;

<%
}
%>
